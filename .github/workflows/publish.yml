name: Publish to Maven Central

# Only publish to Maven Central manually
on:
  workflow_dispatch:

# Ensure only one can run at a time
concurrency:
  group: "publish"

jobs:
  build-debian-amd64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build Debian AMD64
        run: |
          cd libs/whisper-jni
          mkdir -p fakebin
          echo -e '#!/bin/bash\necho amd64' > fakebin/dpkg
          chmod +x fakebin/dpkg
          export PATH="$PWD/fakebin:$PATH"

          chmod +x build_debian.sh
          ./build_debian.sh
      - uses: actions/upload-artifact@v4
        with:
          name: debian-amd64
          path: libs/whisper-jni/src/main/resources/debian-amd64

  build-debian-arm64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build Debian ARM64
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

          cd libs/whisper-jni
          chmod +x build_debian.sh

          export AARCH=arm64
          export CC=aarch64-linux-gnu-gcc
          export CXX=aarch64-linux-gnu-g++
          ./build_debian.sh
      - uses: actions/upload-artifact@v4
        with:
          name: debian-arm64
          path: libs/whisper-jni/src/main/resources/debian-arm64

  build-debian-armv7l:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build Debian ARMv7l
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf

          cd libs/whisper-jni
          chmod +x build_debian.sh

          export AARCH=armv7l
          export CC=arm-linux-gnueabihf-gcc
          export CXX=arm-linux-gnueabihf-g++

          export CMAKE_CFLAGS="-march=armv7-a -mfpu=neon"
          
          ./build_debian.sh
      - uses: actions/upload-artifact@v4
        with:
          name: debian-armv7l
          path: libs/whisper-jni/src/main/resources/debian-armv7l

  build-macos-amd64:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build macOS AMD64
        run: |
          cd libs/whisper-jni
          chmod +x build_macos.sh
          ./build_macos.sh x86_64
      - uses: actions/upload-artifact@v4
        with:
          name: macos-amd64
          path: libs/whisper-jni/src/main/resources/macos-amd64

  build-macos-arm64:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build macOS ARM64
        run: |
          cd libs/whisper-jni
          chmod +x build_macos.sh
          ./build_macos.sh arm64
      - uses: actions/upload-artifact@v4
        with:
          name: macos-arm64
          path: libs/whisper-jni/src/main/resources/macos-arm64

  build-windows-amd64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build Windows AMD64
        run: |
          cd libs/whisper-jni
          ./build_win.ps1
        shell: pwsh
      - uses: actions/upload-artifact@v4
        with:
          name: win-amd64
          path: libs/whisper-jni/src/main/resources/win-amd64

  publish:
    runs-on: ubuntu-latest
    needs:
      [
        build-debian-amd64,
        build-debian-arm64,
        build-debian-armv7l,
        build-macos-amd64,
        build-macos-arm64,
        build-windows-amd64,
      ]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      # Download artifacts from all the build jobs
      - name: Download Debian AMD64 artifact
        uses: actions/download-artifact@v4
        with:
          name: debian-amd64
          path: libs/whisper-jni/src/main/resources/debian-amd64

      - name: Download Debian ARM64 artifact
        uses: actions/download-artifact@v4
        with:
          name: debian-arm64
          path: libs/whisper-jni/src/main/resources/debian-arm64

      - name: Download Debian ARMv7l artifact
        uses: actions/download-artifact@v4
        with:
          name: debian-armv7l
          path: libs/whisper-jni/src/main/resources/debian-armv7l

      - name: Download macOS AMD64 artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-amd64
          path: libs/whisper-jni/src/main/resources/macos-amd64

      - name: Download macOS ARM64 artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-arm64
          path: libs/whisper-jni/src/main/resources/macos-arm64

      - name: Download Windows AMD64 artifact
        uses: actions/download-artifact@v4
        with:
          name: win-amd64
          path: libs/whisper-jni/src/main/resources/win-amd64

      # Move all natives into src/main/resources/natives
      - run: |
          SRC_DIR="libs/whisper-jni/src/main/resources"
          DEST_DIR="src/main/resources/natives"

          mkdir -p "$DEST_DIR"

          for dir in "$SRC_DIR"/*/; do
            folder_name=$(basename "$dir")
            zip_file="$DEST_DIR/$folder_name.zip"

            # Count number of non-.gitkeep files
            file_count=$(find "$dir" -type f ! -name ".gitkeep" | wc -l)

            if [ "$file_count" -eq 0 ]; then
              echo "Skipping empty or .gitkeep-only folder: $folder_name"
              continue
            fi

            echo "Zipping $folder_name to $zip_file"

            # Zip the entire folder, including its name
            (cd "$SRC_DIR" && zip -r "$OLDPWD/$zip_file" "$folder_name")
          done

      - run: ./gradlew clean build publish
      - run: ./gradlew jreleaserDeploy
        env:
          JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.JRELEASER_MAVENCENTRAL_USERNAME }}
          JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.JRELEASER_MAVENCENTRAL_PASSWORD }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
