name: Publish to Maven Central

# Only publish to Maven Central manually
on:
  workflow_dispatch:

# Ensure only one can run at a time
concurrency:
  group: "publish"

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build Linux ${{ matrix.arch }}
        run: |
          cd libs/whisper-jni
          chmod +x build_debian.sh
          ./build_debian.sh

      - uses: actions/upload-artifact@v4
        with:
          name: debian-${{ matrix.arch }}
          path: libs/whisper-jni/src/main/resources/debian-${{ matrix.arch }}

  # Builds for both amd64 and arm64. ARM64 doesn't seem to be very popular so I'm ignoring it unless someone complains (it takes forever to build for it)
  # build-linux:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       arch: [amd64, arm64]

  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: recursive

  #     - name: Set up QEMU (for arm64 builds)
  #       if: matrix.arch == 'arm64'
  #       uses: docker/setup-qemu-action@v3
  #       with:
  #         platforms: arm64

  #     - name: Build Linux ${{ matrix.arch }}
  #       run: |
  #         # We don't need Docker for AMD64
  #         if [ "${{ matrix.arch }}" = "amd64" ]; then
  #           cd libs/whisper-jni
  #           chmod +x build_debian.sh
  #           ./build_debian.sh
  #         else
  #           docker run --rm --platform linux/arm64 \
  #             -v "$PWD:/workspace" -w /workspace/libs/whisper-jni \
  #             debian:bullseye \
  #             bash -c "apt update && apt install -y build-essential cmake git gcc g++ default-jdk \
  #                     && chmod +x build_debian.sh \
  #                     && ./build_debian.sh"
  #         fi

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: debian-${{ matrix.arch }}
  #         path: libs/whisper-jni/src/main/resources/debian-${{ matrix.arch }}

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build macOS ${{ matrix.arch }}
        run: |
          cd libs/whisper-jni
          chmod +x build_macos.sh
          ./build_macos.sh ${{ matrix.arch }}

      - uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}
          path: libs/whisper-jni/src/main/resources/macos-${{ matrix.arch }}

  build-windows-amd64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build Windows AMD64
        run: |
          cd libs/whisper-jni
          ./build_win.ps1
        shell: pwsh
      - uses: actions/upload-artifact@v4
        with:
          name: win-amd64
          path: libs/whisper-jni/src/main/resources/win-amd64

  publish:
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows-amd64]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Download and zip artifacts
        env:
          GH_TOKEN: ${{ github.token }}

        run: |
          for platform in debian-amd64 macos-amd64 macos-arm64 win-amd64; do
            echo "::group::Downloading $platform"

            if ! gh run download -n "$platform" -D "src/main/resources/natives/$platform"; then
              echo "::error::Missing or failed to download artifact: $platform"
              exit 1
            fi

            echo "::endgroup::"

            # Zip it
            (cd src/main/resources/natives && zip -r "$platform.zip" "$platform")
            rm -rf src/main/resources/natives/$platform
          done

      - run: ./gradlew clean build publish
      - run: ./gradlew jreleaserDeploy
        env:
          JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.JRELEASER_MAVENCENTRAL_USERNAME }}
          JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.JRELEASER_MAVENCENTRAL_PASSWORD }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
