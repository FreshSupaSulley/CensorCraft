name: Publish to Maven Central

# Only publish to Maven Central manually
on:
  workflow_dispatch:

# Ensure only one can run at a time
concurrency:
  group: "publish"

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install cross-compiler (only for arm64)
        if: matrix.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Set cross-compile env (only for arm64)
        if: matrix.arch == 'arm64'
        run: |
          echo "CC=/usr/bin/aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX=/usr/bin/aarch64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Build Linux ${{ matrix.arch | upper }}
        run: |
          cd libs/whisper-jni
          chmod +x ../build_debian_patch.sh
          ../build_debian_patch.sh ${{ matrix.arch }}

      - uses: actions/upload-artifact@v4
        with:
          name: debian-${{ matrix.arch }}
          path: libs/whisper-jni/src/main/resources/debian-${{ matrix.arch }}

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build macOS ${{ matrix.arch | upper }}
        run: |
          cd libs/whisper-jni
          chmod +x build_macos.sh
          ./build_macos.sh ${{ matrix.arch }}

      - uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}
          path: libs/whisper-jni/src/main/resources/macos-${{ matrix.arch }}

  build-windows-amd64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build Windows AMD64
        run: |
          cd libs/whisper-jni
          ./build_win.ps1
        shell: pwsh
      - uses: actions/upload-artifact@v4
        with:
          name: win-amd64
          path: libs/whisper-jni/src/main/resources/win-amd64

  publish:
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows-amd64]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Download artifacts
        run: |
          for platform in debian-amd64 macos-amd64 macos-arm64 win-amd64; do
            mkdir -p libs/whisper-jni/src/main/resources/$platform
            echo "::group::Downloading $platform"
            gh run download -n $platform -D libs/whisper-jni/src/main/resources/$platform || echo "Missing artifact: $platform"
            echo "::endgroup::"
          done

      # Move all natives into src/main/resources/natives
      - run: |
          SRC_DIR="libs/whisper-jni/src/main/resources"
          DEST_DIR="src/main/resources/natives"

          mkdir -p "$DEST_DIR"

          for dir in "$SRC_DIR"/*/; do
            folder_name=$(basename "$dir")
            zip_file="$DEST_DIR/$folder_name.zip"

            # Count number of non-.gitkeep files
            file_count=$(find "$dir" -type f ! -name ".gitkeep" | wc -l)

            if [ "$file_count" -eq 0 ]; then
              echo "Skipping empty or .gitkeep-only folder: $folder_name"
              continue
            fi

            echo "Zipping $folder_name to $zip_file"

            # Zip the entire folder, including its name
            (cd "$SRC_DIR" && zip -r "$OLDPWD/$zip_file" "$folder_name")
          done

      - run: ./gradlew clean build publish
      - run: ./gradlew jreleaserDeploy
        env:
          JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.JRELEASER_MAVENCENTRAL_USERNAME }}
          JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.JRELEASER_MAVENCENTRAL_PASSWORD }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
