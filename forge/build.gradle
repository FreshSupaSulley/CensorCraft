// Shading tutorial: https://gist.github.com/SizableShrimp/949e7c219bfc94487a45226b64ac7749
plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
	id 'com.gradleup.shadow' version '9.0.0-beta12'
    id 'net.minecraftforge.gradle' version "${mcf_range}"
	id 'org.spongepowered.mixin' version '0.7.+'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    // Forge 1.20.6 and newer use official mappings at runtime, so we shouldn't reobf from official to SRG
    reobf = false

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // Default run configurations.
    runs {
        configureEach {
            workingDirectory file('run')
            property 'forge.logging.console.level', 'debug'
            property 'eventbus.api.strictRuntimeChecks', 'true'
            // does this even do anything
            //arg "-mixin.config=${mod_id}.mixins.json"
        }
        client {
            property 'forge.enabledGameTestNamespaces', mod_id
			args '--username', new Random().nextInt(1000)
        }
        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "henkelmax.public"
        url = 'https://maven.maxhenkel.de/repository/public'
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = 'Forge'
        url = 'https://maven.minecraftforge.net'
    }
    maven {
        name = 'Minecraft libraries'
        url = 'https://libraries.minecraft.net'
    }
    exclusiveContent {
        forRepository {
            maven {
                name = 'Sponge'
                url = 'https://repo.spongepowered.org/repository/maven-public'
            }
        }
        filter {
            includeGroupAndSubgroups('org.spongepowered')
        }
    }
    // If we're using mavenLocal in any subproject we depend on (:common), we also need to put it here
    // mavenLocal()
}

configurations {
	shade
	implementation.extendsFrom(shade)
}

// MASSIVELY IMPORTANT
// Use :common for Minecraft code (not Forge specific)
sourceSets {
    main {
        java {
            srcDir "../common/src/main/java"
        }
        resources {
            srcDir "../common/src/main/resources"
        }
    }
}

dependencies {
    // Forge specific
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    // Mixins
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // Now we need the simple voice chat mod itself during runtime
    runtimeOnly fg.deobf("maven.modrinth:simple-voice-chat:forge-${voicechat_version}")

    // Shade our API transitively
    shade project(":api")
    shade libs.whisperjni
    shade libs.json
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources) {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

	// fuck you
	/*filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand replaceProperties + [project: project]
	}*/
	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand project.properties + [project: project]
	}
}

mixin {
	//add sourceSets.main, 'censorcraft.refmap.json'
	config "censorcraft.mixins.json"
}

jar {
    // We are only using shading, no need for jar task
	enabled = false
    // This still gets pulled into the shaded jar
	manifest {
		attributes([
			'MixinConfigs': 'censorcraft.mixins.json',
			'Specification-Title'	 : mod_id,
//			'Specification-Vendor'	: mod_authors,
//			'Specification-Version'   : '1',
			'Implementation-Title'	: project.name,
//			'Implementation-Version'  : project.jar.archiveVersion,
			'Implementation-Vendor'   : mod_authors,
			'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

shadowJar {
	// Set classifier to an empty string (final jar name)
    archiveClassifier.set("")

    // Bundled Vulkan natives has this for git reasons but we don't need it in the jar
    exclude "**/.gitkeep"

    // Relocate external jars to limit conflictions
    relocate 'org.json', 'io.github.freshsupasulley.json'

    // Only shade dependencies go into fat jar
    configurations = [project.configurations.shade]

    // Exclude slf4j-api from the final bundled JAR
    dependencies {
        exclude(dependency("org.slf4j:slf4j-api:2.0.16"))
    }
}

assemble.dependsOn shadowJar

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

// Merge the resources and classes into the same directory, because Java expects modules to be in a single directory.
// And if we have it in multiple we have to do performance intensive hacks like having the UnionFileSystem
// This will eventually be migrated to ForgeGradle so modders don't need to manually do it. But that is later.
sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

eclipse {
    // Run everytime eclipse builds the code
    //autoBuildTasks genEclipseRuns
    // Run when importing the project
    synchronizationTasks 'genEclipseRuns'
}

// IntelliJ no longer downloads javadocs and sources by default, this tells Gradle to force IntelliJ to do it.
idea.module { downloadJavadoc = downloadSources = true }
