/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.io.IOException;
import java.nio.file.Path;
import java.util.concurrent.ExecutionException;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import io.github.freshsupasulley.JScribe;
import io.github.freshsupasulley.LibraryLoader;
import io.github.freshsupasulley.ModelDownloader;

class AppTest {
	
	static Path testModel = Path.of("src/test/resources/base.en.bin");
	
	// @Disabled
	@BeforeAll
	@Test
	static void downloadModel() throws IOException, InterruptedException, ExecutionException
	{
		System.out.println("Test");
		assert JScribe.getModels().length != 0;
		
		// Don't download the model file if we already have it
		if(testModel.toFile().exists())
		{
			System.out.println("Not downloading, already exists");
			return;
		}
		
		ModelDownloader downloader = JScribe.downloadModel("tiny", testModel, (hi, exception) ->
		{
		});
		
		while(!downloader.isDone())
		{
			System.out.println(downloader.getBytesRead());
			
			Thread.sleep(500);
		}
	}
	
	@Disabled
	@Test
	void test() throws IOException
	{
		JScribe.Builder builder = new JScribe.Builder(testModel, 48000).warmUpModel();
		
		// Load custom Vulkan natives manually because we have to
		if(LibraryLoader.canUseVulkan())
		{
			builder.skipLoadingNatives();
			
			String vulkanPath = LibraryLoader.getVulkanDLL().toAbsolutePath().toString();
			System.load(vulkanPath);
			
			Path tempDir = Path.of("src", "main", "resources", "win-amd64-vulkan");
			System.load(tempDir.resolve("ggml.dll").toAbsolutePath().toString());
			System.load(tempDir.resolve("whisper.dll").toAbsolutePath().toString());
			System.load(tempDir.resolve("whisper-jni.dll").toAbsolutePath().toString());
		}
		
		JScribe scribe = builder.build();
		scribe.start();
	}
	
	@Disabled
	@Test
	void startStopTest() throws Exception
	{
		JScribe scribe = new JScribe.Builder(testModel, 48000).warmUpModel().build();
		
		long startTime = System.currentTimeMillis();
		long testDuration = 20000;
		
		System.out.println("Starting stability test");
		
		while(System.currentTimeMillis() - startTime < testDuration)
		{
			if(scribe.isInUse())
			{
				throw new IllegalStateException("Shouldn't be running!");
			}
			
			// Constantly start and stop
			scribe.start();
//			Thread.sleep(5000);
			scribe.stop();
		}
	}
	// private Path samplePath = Path.of("/Users/boschert.12/Desktop/shit/jscribe/src/test/resources/jfk.wav");
	//
	// @Test
	// public void testVAD() throws IOException, UnsupportedAudioFileException
	// {
	// var sampleFile = samplePath.toFile();
	// if(!sampleFile.exists() || !sampleFile.isFile())
	// {
	// throw new RuntimeException("Missing sample file");
	// }
	// VoiceActivityDetector.loadLibrary();
	// VoiceActivityDetector vad = VoiceActivityDetector.newInstance();
	//
	// int sampleRate = 16000;
	// vad.setMode(VoiceActivityDetector.Mode.QUALITY);
	// vad.setSampleRate(VoiceActivityDetector.SampleRate.fromValue(sampleRate));
	// short[] samples = readJFKFileSamples();
	// int samplesLength = samples.length;
	// int step = (sampleRate / 1000) * 10; // 10ms step (only allows 10, 20 or 30ms frame)
	// int detection = 0;
	// for(int i = 0; i < samplesLength - step; i += step)
	// {
	// short[] frame = Arrays.copyOfRange(samples, i, i + step);
	// if(vad.process(frame))
	// {
	// detection = i;
	// break;
	// }
	// }
	// System.out.println(detection);
	// assertEquals(640, detection);
	// }
	//
	// private short[] readJFKFileSamples() throws UnsupportedAudioFileException, IOException
	// {
	// // sample is a 16 bit int 16000hz little endian wav file
	// AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(samplePath.toFile());
	// // read all the available data to a little endian capture buffer
	// ByteBuffer captureBuffer = ByteBuffer.allocate(audioInputStream.available());
	// captureBuffer.order(ByteOrder.LITTLE_ENDIAN);
	// int read = audioInputStream.read(captureBuffer.array());
	// if(read == -1)
	// {
	// throw new IOException("Empty file");
	// }
	// // obtain the 16 int audio samples, short type in java
	// var shortBuffer = captureBuffer.asShortBuffer();
	// short[] samples = new short[captureBuffer.capacity() / 2];
	// var i = 0;
	// while(shortBuffer.hasRemaining())
	// {
	// samples[i++] = shortBuffer.get();
	// }
	// return samples;
	// }
}
