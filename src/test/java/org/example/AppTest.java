/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.io.IOException;
import java.nio.file.Path;
import java.util.concurrent.ExecutionException;

import org.junit.jupiter.api.Test;

import io.github.freshsupasulley.JScribe;
import io.github.freshsupasulley.ModelDownloader;

class AppTest {
	
	static Path testModel = Path.of("src/test/resources/tiny.bin");
	
	@Test
	void downloadModel() throws IOException, InterruptedException, ExecutionException
	{
		assert JScribe.getModels().length != 0;
		
		// Don't download the model file if we already have it
		if(testModel.toFile().exists())
		{
			System.out.println("Not downloading, already exists");
			return;
		}
		
		ModelDownloader downloader = JScribe.downloadModel("tiny", testModel);
		
		while(!downloader.isDone())
		{
			System.out.println(downloader.getBytesRead());
			
			if(downloader.getBytesRead() > 46444236L)
			{
				downloader.cancel();
			}
			Thread.sleep(500);
		}
	}
	
//	@Test
//	void libraryLoads() throws IOException
//	{
//		JScribe scribe = new JScribe.Builder().warmUpModel().build();
//		scribe.start(testModel, "", 1000, 500, true, true);
//		
//		// Translate for a while
//		long start = System.currentTimeMillis(), lastMsg = start;
//		String killWord = "subscribe";
//		
//		// 1 mins max
//		outer: while(System.currentTimeMillis() - start < 60000)
//		{
//			if(System.currentTimeMillis() - lastMsg <= 200) continue;
//			lastMsg = System.currentTimeMillis();
//			
//			if(scribe.isInitializing())
//			{
//				System.out.println("Initializing");
//				continue;
//			}
//			
//			if(scribe.noAudio())
//			{
//				System.out.println("No audio, exiting");
//				break;
//			}
//			
//			System.out.println("Audio level: " + scribe.getAudioLevel() + " - " + scribe.noAudio());
//			
//			for(String buffer = null; !(buffer = scribe.getTranscriptions().getRawString()).isBlank(); System.out.println(buffer))
//			{
//				if(buffer.toLowerCase().contains(killWord))
//				{
//					scribe.stop();
//					break outer;
//				}
//			}
//		}
//		
//		while(scribe.isInUse())
//		{
//			assert !scribe.isRunning() && scribe.isShuttingDown();
//		}
//	}
	
	// private Path samplePath = Path.of("/Users/boschert.12/Desktop/shit/jscribe/src/test/resources/jfk.wav");
	//
	// @Test
	// public void testVAD() throws IOException, UnsupportedAudioFileException
	// {
	// var sampleFile = samplePath.toFile();
	// if(!sampleFile.exists() || !sampleFile.isFile())
	// {
	// throw new RuntimeException("Missing sample file");
	// }
	// VoiceActivityDetector.loadLibrary();
	// VoiceActivityDetector vad = VoiceActivityDetector.newInstance();
	//
	// int sampleRate = 16000;
	// vad.setMode(VoiceActivityDetector.Mode.QUALITY);
	// vad.setSampleRate(VoiceActivityDetector.SampleRate.fromValue(sampleRate));
	// short[] samples = readJFKFileSamples();
	// int samplesLength = samples.length;
	// int step = (sampleRate / 1000) * 10; // 10ms step (only allows 10, 20 or 30ms frame)
	// int detection = 0;
	// for(int i = 0; i < samplesLength - step; i += step)
	// {
	// short[] frame = Arrays.copyOfRange(samples, i, i + step);
	// if(vad.process(frame))
	// {
	// detection = i;
	// break;
	// }
	// }
	// System.out.println(detection);
	// assertEquals(640, detection);
	// }
	//
	// private short[] readJFKFileSamples() throws UnsupportedAudioFileException, IOException
	// {
	// // sample is a 16 bit int 16000hz little endian wav file
	// AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(samplePath.toFile());
	// // read all the available data to a little endian capture buffer
	// ByteBuffer captureBuffer = ByteBuffer.allocate(audioInputStream.available());
	// captureBuffer.order(ByteOrder.LITTLE_ENDIAN);
	// int read = audioInputStream.read(captureBuffer.array());
	// if(read == -1)
	// {
	// throw new IOException("Empty file");
	// }
	// // obtain the 16 int audio samples, short type in java
	// var shortBuffer = captureBuffer.asShortBuffer();
	// short[] samples = new short[captureBuffer.capacity() / 2];
	// var i = 0;
	// while(shortBuffer.hasRemaining())
	// {
	// samples[i++] = shortBuffer.get();
	// }
	// return samples;
	// }
}
